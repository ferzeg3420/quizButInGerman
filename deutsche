#!/bin/bash

#constants
SUCCESS=0
ERROR_CHECK_GUESS_RETVAL=3
ERROR_BAD_FLAGS=4
ERROR_NOT_A_NUMBER=5
ERROR_LIMIT_TOO_LARGE=6
EXIT_SIGNAL=2
CORRECT=1
INCORRECT=0
FILE_PATH="/Users/fernandozegada/Documents/languages/german-to-english"
TEMP_PATH="/tmp/deutsche.temp"
TEMP_INCORRECT_PATH="/tmp/deutsche_incorrect.temp"
LIMIT=''

# Declare the array of words
declare -a WORDS

# clear or create the incorrect answers file
echo -n "" > "$TEMP_INCORRECT_PATH"

sort -R "$FILE_PATH" > $TEMP_PATH

# put the lines of the file in a the words array
count=0
while read -r LINE
do
   WORDS[$count]="$LINE"
   ((count++))
done < $TEMP_PATH

NUM_ELEMS=${#WORDS[@]}

print_usage() {
  echo
  echo "Usage: deutsche [-h] [-l number]"
  echo "    Try and translate all of these german words!"
  echo
  echo "    -h    Prints this message and quits"
  echo "    -l    Limits the number of words the user has to translate"
  echo "    -e    Edit the answer sheet with your default editor"
  echo
}

validateLimit() {
  if [[ "$1" =~ ^[1-9][0-9]*$ ]]
  then
    if [ "$NUM_ELEMS" -lt "$1" ]
    then
      echo "The limit value is larger than the number of elements" >&2
      exit $ERROR_LIMIT_TOO_LARGE
    fi
  else
    echo "The limit value is not a valid number" >&2
    exit $ERROR_NOT_A_NUMBER
  fi
}

# process flags (command options)
while getopts 'hl:e' flag
do
  case "${flag}"
  in
    l) validateLimit "${OPTARG}"
       LIMIT=${OPTARG};;
    h) print_usage 
       exit $SUCCESS;;
    e) ${EDITOR} ${FILE_PATH} 
       exit $?;;
    *) print_usage
       exit $ERROR_BAD_FLAGS ;;
  esac
done

tolower() {
  echo "$1" | tr '[:upper:]' '[:lower:]'
}

showWrongGuesses() {
  FIRST_LINE=$(head -1 "${TEMP_INCORRECT_PATH}")
  if [ "$FIRST_LINE" != "" ]
  then
    echo "Show incorrect guesses? [Y/y]"

    read -r USER_RESPONSE
    if [[ "$USER_RESPONSE" =~ [Yy] ]]
    then
      less "$TEMP_INCORRECT_PATH"
    fi
  fi
}

checkGuess() {
  local answer="^${1}\$"

  while read -r guess
  do
    guess=$(tolower "$guess")
    if [[ "$guess" =~ ($answer) ]]
    then
      echo $CORRECT
      break
    elif [ "$guess" = "" ] 
    then
      echo $INCORRECT
      break
    elif [ "q" = "$guess" ]
    then
      echo $EXIT_SIGNAL
      break
    fi
  done   
}

CORRECT_COUNT=0

#welcome message
clear
echo
echo "You can enter q to quit at any time. Good luck!"
echo

if [ "$LIMIT" = '' ]
then
  NUM_WORDS_TO_GUESS="$NUM_ELEMS"
else
  validateLimit "$LIMIT"
  NUM_WORDS_TO_GUESS="$LIMIT"
fi

# main loop
for (( i=0; i<NUM_WORDS_TO_GUESS; i++))
do
  PROMPT="${WORDS[${i}]%:*}"
  ANSWER_RAW="${WORDS[${i}]#*:}"
  ANSWER=$(tolower "$ANSWER_RAW")
 
  printf "\e[1;34m%s\e[0m\n" "$PROMPT"
  say -v "Anna" "$PROMPT"

  IS_CORRECT=$(checkGuess "${ANSWER}")

  if [ "$IS_CORRECT" = "$CORRECT" ]
  then
    ((CORRECT_COUNT++))
  elif [ "$IS_CORRECT" = "$EXIT_SIGNAL" ]
  then
    ((i-=1))
    break
  elif [ "$IS_CORRECT" = "$INCORRECT" ]
  then
    echo "The right answer was: ${ANSWER%%|*}"
    echo 
    echo "${PROMPT} -> ${ANSWER_RAW}" >> "$TEMP_INCORRECT_PATH"
  else
    exit $ERROR_CHECK_GUESS_RETVAL
  fi
done
 
QUESTION_NUM=$(echo "$i + 1" |  bc)
# echo "QUESTION_NUM=${QUESTION_NUM}"

if [ "$QUESTION_NUM" -eq 0 ]
then
  SCORE_PERCENTAGE=0
else
    SCORE_PERCENTAGE=$(echo "scale=3;(${CORRECT_COUNT}/${QUESTION_NUM})*100" | bc)
  SCORE_PERCENTAGE=$(echo "${SCORE_PERCENTAGE}" | awk '{print int($1+0.5)}')
fi

#end message
clear
echo
echo "FINAL SCORE: ${SCORE_PERCENTAGE}%"
echo
showWrongGuesses
clear

exit $SUCCESS
